Elm.Mainx = Elm.Mainx || {};
Elm.Mainx.make = function (_elm) {
   "use strict";
   _elm.Mainx = _elm.Mainx || {};
   if (_elm.Mainx.values) return _elm.Mainx.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Form = Elm.Form.make(_elm),
   $Form$Input = Elm.Form.Input.make(_elm),
   $Form$Validate = Elm.Form.Validate.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var update = F2(function (action,_p0) {
      var _p1 = _p0;
      var _p3 = _p1;
      var _p2 = action;
      if (_p2.ctor === "NoOp") {
            return {ctor: "_Tuple2",_0: _p3,_1: $Effects.none};
         } else {
            return {ctor: "_Tuple2",_0: _U.update(_p3,{form: A2($Form.update,_p2._0,_p1.form)}),_1: $Effects.none};
         }
   });
   var FormAction = function (a) {    return {ctor: "FormAction",_0: a};};
   var view = F2(function (address,_p4) {
      var _p5 = _p4;
      var _p7 = _p5.form;
      var baz = A2($Form.getFieldAsBool,"baz",_p7);
      var bar = A2($Form.getFieldAsString,"bar",_p7);
      var errorFor = function (field) {
         var _p6 = field.liveError;
         if (_p6.ctor === "Just") {
               return A2($Html.div,_U.list([$Html$Attributes.$class("error")]),_U.list([$Html.text($Basics.toString(_p6._0))]));
            } else {
               return $Html.text("");
            }
      };
      var formAddress = A2($Signal.forwardTo,address,FormAction);
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.div,
              _U.list([]),
              _U.list([A2($Html.label,_U.list([]),_U.list([$Html.text("Bar")]))
                      ,A3($Form$Input.textInput,bar,formAddress,_U.list([]))
                      ,errorFor(bar)
                      ,A2($Html.label,_U.list([]),_U.list([A3($Form$Input.checkboxInput,baz,formAddress,_U.list([])),$Html.text("Baz")]))
                      ,errorFor(baz)
                      ,A2($Html.button,_U.list([A2($Html$Events.onClick,formAddress,$Form.submit)]),_U.list([$Html.text("Submit")]))]))
              ,A2($Html.div,_U.list([]),_U.list([$Html.text("xoxo")]))]));
   });
   var NoOp = {ctor: "NoOp"};
   var Model = function (a) {    return {form: a};};
   var Foo = F2(function (a,b) {    return {bar: a,baz: b};});
   var validate = A3($Form$Validate.form2,Foo,A2($Form$Validate._op[":="],"bar",$Form$Validate.email),A2($Form$Validate._op[":="],"baz",$Form$Validate.bool));
   var init = {ctor: "_Tuple2",_0: {form: A2($Form.initial,_U.list([]),validate)},_1: $Effects.none};
   var app = $StartApp.start({init: init,update: update,view: view,inputs: _U.list([])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   return _elm.Mainx.values = {_op: _op
                              ,Foo: Foo
                              ,Model: Model
                              ,NoOp: NoOp
                              ,FormAction: FormAction
                              ,init: init
                              ,validate: validate
                              ,update: update
                              ,view: view
                              ,app: app
                              ,main: main};
};