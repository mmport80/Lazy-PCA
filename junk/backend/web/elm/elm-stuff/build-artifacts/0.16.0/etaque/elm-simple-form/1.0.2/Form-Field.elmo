Elm.Form = Elm.Form || {};
Elm.Form.Field = Elm.Form.Field || {};
Elm.Form.Field.make = function (_elm) {
   "use strict";
   _elm.Form = _elm.Form || {};
   _elm.Form.Field = _elm.Form.Field || {};
   if (_elm.Form.Field.values) return _elm.Form.Field.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var asString = function (field) {    var _p0 = field;if (_p0.ctor === "Text") {    return $Maybe.Just(_p0._0);} else {    return $Maybe.Nothing;}};
   var asBool = function (field) {    var _p1 = field;if (_p1.ctor === "Check") {    return $Maybe.Just(_p1._0);} else {    return $Maybe.Nothing;}};
   var at = F2(function (name,field) {    var _p2 = field;if (_p2.ctor === "Group") {    return A2($Dict.get,name,_p2._0);} else {    return $Maybe.Nothing;}});
   var EmptyField = {ctor: "EmptyField"};
   var Check = function (a) {    return {ctor: "Check",_0: a};};
   var check = Check;
   var Text = function (a) {    return {ctor: "Text",_0: a};};
   var text = Text;
   var select = text;
   var radio = text;
   var Group = function (a) {    return {ctor: "Group",_0: a};};
   var group = function (_p3) {    return Group($Dict.fromList(_p3));};
   return _elm.Form.Field.values = {_op: _op
                                   ,at: at
                                   ,asString: asString
                                   ,asBool: asBool
                                   ,text: text
                                   ,select: select
                                   ,radio: radio
                                   ,check: check
                                   ,group: group
                                   ,Group: Group
                                   ,Text: Text
                                   ,Check: Check
                                   ,EmptyField: EmptyField};
};