Elm.Form = Elm.Form || {};
Elm.Form.Validate = Elm.Form.Validate || {};
Elm.Form.Validate.make = function (_elm) {
   "use strict";
   _elm.Form = _elm.Form || {};
   _elm.Form.Validate = _elm.Form.Validate || {};
   if (_elm.Form.Validate.values) return _elm.Form.Validate.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Date = Elm.Date.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Form$Error = Elm.Form.Error.make(_elm),
   $Form$Field = Elm.Form.Field.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Regex = Elm.Regex.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var oneOf = F2(function (validations,field) {
      var walkResults = F2(function (result,combined) {
         var _p0 = {ctor: "_Tuple2",_0: combined,_1: result};
         if (_p0.ctor === "_Tuple2" && _p0._0.ctor === "Ok") {
               return combined;
            } else {
               return result;
            }
      });
      var results = A2($List.map,function (v) {    return v(field);},validations);
      return A3($List.foldl,walkResults,$Result.Err($Form$Error.Empty),results);
   });
   var customValidation = F3(function (validation,callback,field) {    return A2($Result.andThen,validation(field),callback);});
   var succeed = F2(function (a,field) {    return $Result.Ok(a);});
   var fail = F2(function (error,field) {    return $Result.Err(error);});
   var includedIn = F3(function (items,s,field) {    return A2($List.member,s,items) ? $Result.Ok(s) : $Result.Err($Form$Error.NotIncludedIn);});
   var validUrlPattern = $Regex.caseInsensitive($Regex.regex("^(https?://)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\w \\.-]*)*/?$"));
   var validEmailPattern = $Regex.caseInsensitive($Regex.regex("^[a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$"));
   var format = F3(function (s,regex,field) {    return A2($Regex.contains,regex,s) ? $Result.Ok(s) : $Result.Err($Form$Error.InvalidFormat);});
   var maxFloat = F3(function (max,i,field) {    return _U.cmp(i,max) < 1 ? $Result.Ok(i) : $Result.Err($Form$Error.GreaterFloatThan(max));});
   var minFloat = F3(function (min,i,field) {    return _U.cmp(i,min) > -1 ? $Result.Ok(i) : $Result.Err($Form$Error.SmallerFloatThan(min));});
   var maxInt = F3(function (max,i,field) {    return _U.cmp(i,max) < 1 ? $Result.Ok(i) : $Result.Err($Form$Error.GreaterIntThan(max));});
   var minInt = F3(function (min,i,field) {    return _U.cmp(i,min) > -1 ? $Result.Ok(i) : $Result.Err($Form$Error.SmallerIntThan(min));});
   var maxLength = F3(function (max,s,field) {    return _U.cmp($String.length(s),max) < 1 ? $Result.Ok(s) : $Result.Err($Form$Error.ShorterStringThan(max));});
   var minLength = F3(function (min,s,field) {
      return _U.cmp($String.length(s),min) > -1 ? $Result.Ok(s) : $Result.Err($Form$Error.ShorterStringThan(min));
   });
   var nonEmpty = F2(function (s,field) {    return $String.isEmpty(s) ? $Result.Err($Form$Error.Empty) : $Result.Ok(s);});
   var maybe = F2(function (validation,field) {    return $Result.Ok($Result.toMaybe(validation(field)));});
   var date = function (v) {
      var _p1 = v;
      if (_p1.ctor === "Text") {
            return A2($Result.formatError,function (_p2) {    return $Form$Error.InvalidDate;},$Date.fromString(_p1._0));
         } else {
            return $Result.Err($Form$Error.InvalidDate);
         }
   };
   var bool = function (v) {    var _p3 = v;if (_p3.ctor === "Check") {    return $Result.Ok(_p3._0);} else {    return $Result.Ok(false);}};
   var emptyString = function (v) {
      var _p4 = v;
      if (_p4.ctor === "Text") {
            var _p5 = _p4._0;
            return $String.isEmpty(_p5) ? $Result.Ok(_p5) : $Result.Err($Form$Error.InvalidString);
         } else {
            return $Result.Ok("");
         }
   };
   var string = function (v) {
      var _p6 = v;
      if (_p6.ctor === "Text") {
            var _p7 = _p6._0;
            return $String.isEmpty(_p7) ? $Result.Err($Form$Error.Empty) : $Result.Ok(_p7);
         } else {
            return $Result.Err($Form$Error.InvalidString);
         }
   };
   var $float = function (v) {
      var _p8 = v;
      if (_p8.ctor === "Text") {
            return A2($Result.formatError,function (_p9) {    return $Form$Error.InvalidFloat;},$String.toFloat(_p8._0));
         } else {
            return $Result.Err($Form$Error.InvalidInt);
         }
   };
   var $int = function (v) {
      var _p10 = v;
      if (_p10.ctor === "Text") {
            return A2($Result.formatError,function (_p11) {    return $Form$Error.InvalidInt;},$String.toInt(_p10._0));
         } else {
            return $Result.Err($Form$Error.InvalidInt);
         }
   };
   var getErr = function (res) {    var _p12 = res;if (_p12.ctor === "Ok") {    return $Maybe.Nothing;} else {    return $Maybe.Just(_p12._0);}};
   var groupErrorsUnion = F2(function (e1,e2) {
      var _p13 = {ctor: "_Tuple2",_0: e1,_1: e2};
      if (_p13.ctor === "_Tuple2" && _p13._0.ctor === "GroupErrors" && _p13._1.ctor === "GroupErrors") {
            return $Form$Error.GroupErrors(A2($Dict.union,_p13._0._0,_p13._1._0));
         } else {
            return e2;
         }
   });
   var mergeMany = function (errors) {
      return A3($List.foldl,groupErrorsUnion,$Form$Error.GroupErrors($Dict.empty),A2($List.filterMap,$Basics.identity,errors));
   };
   var get = F3(function (key,validation,field) {
      return A2($Result.formatError,
      function (e) {
         return $Form$Error.GroupErrors($Dict.fromList(_U.list([{ctor: "_Tuple2",_0: key,_1: e}])));
      },
      validation(A2($Maybe.withDefault,$Form$Field.EmptyField,A2($Form$Field.at,key,field))));
   });
   _op[":="] = get;
   _op["?="] = F2(function (s,v) {    return maybe(A2(get,s,v));});
   var customError = $Form$Error.CustomError;
   var formatError = F3(function (f,validation,field) {    return A2($Result.formatError,f,validation(field));});
   var defaultValue = F3(function (a,validation,field) {    return $Result.Ok(A2($Result.withDefault,a,validation(field)));});
   var apply = F3(function (partialValidation,aValidation,field) {
      var _p14 = {ctor: "_Tuple2",_0: partialValidation(field),_1: aValidation(field)};
      if (_p14._0.ctor === "Ok" && _p14._1.ctor === "Ok") {
            return $Result.Ok(_p14._0._0(_p14._1._0));
         } else {
            return $Result.Err(mergeMany(_U.list([getErr(_p14._0),getErr(_p14._1)])));
         }
   });
   _op["|:"] = apply;
   var andThen = F3(function (validation,callback,field) {
      return A2($Result.andThen,validation(field),function (next) {    return A2(callback,next,field);});
   });
   var pipeTo = $Basics.flip(andThen);
   var email = A2(andThen,
   string,
   function (s) {
      return A2(formatError,function (_p15) {    return $Form$Error.InvalidEmail;},A2(format,s,validEmailPattern));
   });
   var url = A2(andThen,string,function (s) {    return A2(formatError,function (_p16) {    return $Form$Error.InvalidUrl;},A2(format,s,validUrlPattern));});
   var map = F3(function (f,validation,field) {    return A2($Result.map,f,validation(field));});
   var form1 = map;
   var form2 = F3(function (func,v1,v2) {    return A2(apply,A2(form1,func,v1),v2);});
   var form3 = F4(function (func,v1,v2,v3) {    return A2(apply,A3(form2,func,v1,v2),v3);});
   var form4 = F5(function (func,v1,v2,v3,v4) {    return A2(apply,A4(form3,func,v1,v2,v3),v4);});
   var form5 = F6(function (func,v1,v2,v3,v4,v5) {    return A2(apply,A5(form4,func,v1,v2,v3,v4),v5);});
   var form6 = F7(function (func,v1,v2,v3,v4,v5,v6) {    return A2(apply,A6(form5,func,v1,v2,v3,v4,v5),v6);});
   var form7 = F8(function (func,v1,v2,v3,v4,v5,v6,v7) {    return A2(apply,A7(form6,func,v1,v2,v3,v4,v5,v6),v7);});
   var form8 = F9(function (func,v1,v2,v3,v4,v5,v6,v7,v8) {    return A2(apply,A8(form7,func,v1,v2,v3,v4,v5,v6,v7),v8);});
   return _elm.Form.Validate.values = {_op: _op
                                      ,get: get
                                      ,map: map
                                      ,andThen: andThen
                                      ,pipeTo: pipeTo
                                      ,apply: apply
                                      ,customError: customError
                                      ,defaultValue: defaultValue
                                      ,form1: form1
                                      ,form2: form2
                                      ,form3: form3
                                      ,form4: form4
                                      ,form5: form5
                                      ,form6: form6
                                      ,form7: form7
                                      ,form8: form8
                                      ,string: string
                                      ,$int: $int
                                      ,$float: $float
                                      ,bool: bool
                                      ,date: date
                                      ,maybe: maybe
                                      ,email: email
                                      ,url: url
                                      ,emptyString: emptyString
                                      ,minInt: minInt
                                      ,maxInt: maxInt
                                      ,minFloat: minFloat
                                      ,maxFloat: maxFloat
                                      ,minLength: minLength
                                      ,maxLength: maxLength
                                      ,nonEmpty: nonEmpty
                                      ,format: format
                                      ,includedIn: includedIn
                                      ,fail: fail
                                      ,succeed: succeed
                                      ,customValidation: customValidation
                                      ,oneOf: oneOf};
};