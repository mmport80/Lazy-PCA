Elm.RequestForm = Elm.RequestForm || {};
Elm.RequestForm.make = function (_elm) {
   "use strict";
   _elm.RequestForm = _elm.RequestForm || {};
   if (_elm.RequestForm.values) return _elm.RequestForm.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Source = Elm.Source.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Ticker = Elm.Ticker.make(_elm),
   $Yield = Elm.Yield.make(_elm);
   var _op = {};
   var testMailBox = $Signal.mailbox(_U.list([{ctor: "_Tuple7",_0: "",_1: 0,_2: 0,_3: 0,_4: 0,_5: 0,_6: 0}]));
   _op["=>"] = F2(function (v0,v1) {    return {ctor: "_Tuple2",_0: v0,_1: v1};});
   var quandlUrl = function (model) {
      return A2($Http.url,
      A2($Basics._op["++"],
      "https://www.quandl.com/api/v3/datasets/",
      A2($Basics._op["++"],model.source,A2($Basics._op["++"],"/",A2($Basics._op["++"],model.ticker,".json")))),
      _U.list([A2(_op["=>"],"auth_token","Fp6cFhibc5xvL2pN3dnu")]));
   };
   var row = A8($Json$Decode.tuple7,
   F7(function (v0,v1,v2,v3,v4,v5,v6) {    return {ctor: "_Tuple7",_0: v0,_1: v1,_2: v2,_3: v3,_4: v4,_5: v5,_6: v6};}),
   $Json$Decode.string,
   $Json$Decode.$float,
   $Json$Decode.$float,
   $Json$Decode.$float,
   $Json$Decode.$float,
   $Json$Decode.$float,
   $Json$Decode.$float);
   var decodeData = A2($Json$Decode.at,_U.list(["dataset","data"]),$Json$Decode.list(row));
   var NoOp = {ctor: "NoOp"};
   var sendData = function (data) {
      return $Effects.task(A2($Task.andThen,A2($Signal.send,testMailBox.address,data),function (_p0) {    return $Task.succeed(NoOp);}));
   };
   var NewData = function (a) {    return {ctor: "NewData",_0: a};};
   var getData = function (model) {    return $Effects.task(A2($Task.map,NewData,$Task.toMaybe(A2($Http.get,decodeData,quandlUrl(model)))));};
   var update = F2(function (action,model) {
      var _p1 = action;
      switch (_p1.ctor)
      {case "UpdateSource": return {ctor: "_Tuple2",_0: _U.update(model,{source: A2($Source.update,_p1._0,model.source)}),_1: $Effects.none};
         case "UpdateTicker": return {ctor: "_Tuple2",_0: _U.update(model,{ticker: A2($Ticker.update,_p1._0,model.ticker)}),_1: $Effects.none};
         case "UpdateYield": return {ctor: "_Tuple2",_0: _U.update(model,{$yield: A2($Yield.update,_p1._0,model.$yield)}),_1: $Effects.none};
         case "Request": return {ctor: "_Tuple2",_0: model,_1: getData(model)};
         case "NoOp": return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         default: var data = A2($Maybe.withDefault,model.newData,_p1._0);
           return {ctor: "_Tuple2",_0: _U.update(model,{newData: data}),_1: sendData(data)};}
   });
   var Request = {ctor: "Request"};
   var UpdateYield = function (a) {    return {ctor: "UpdateYield",_0: a};};
   var UpdateTicker = function (a) {    return {ctor: "UpdateTicker",_0: a};};
   var UpdateSource = function (a) {    return {ctor: "UpdateSource",_0: a};};
   var view = F2(function (address,model) {
      var l = "x";
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Source.view,A2($Signal.forwardTo,address,UpdateSource),model.source)
              ,A2($Ticker.view,A2($Signal.forwardTo,address,UpdateTicker),model.ticker)
              ,A2($Yield.view,A2($Signal.forwardTo,address,UpdateYield),model.$yield)
              ,$Html.text("Yield")
              ,A2($Html.a,_U.list([$Html$Attributes.href("#"),A2($Html$Events.onClick,address,Request)]),_U.list([$Html.text("Pull")]))]));
   });
   var init = F3(function (source,ticker,$yield) {
      return {ctor: "_Tuple2"
             ,_0: {source: $Source.init(source)
                  ,ticker: $Ticker.init(ticker)
                  ,$yield: $Yield.init($yield)
                  ,newData: _U.list([{ctor: "_Tuple7",_0: "",_1: 0,_2: 0,_3: 0,_4: 0,_5: 0,_6: 0}])}
             ,_1: $Effects.none};
   });
   var Model = F4(function (a,b,c,d) {    return {source: a,ticker: b,$yield: c,newData: d};});
   return _elm.RequestForm.values = {_op: _op
                                    ,Model: Model
                                    ,init: init
                                    ,UpdateSource: UpdateSource
                                    ,UpdateTicker: UpdateTicker
                                    ,UpdateYield: UpdateYield
                                    ,Request: Request
                                    ,NewData: NewData
                                    ,NoOp: NoOp
                                    ,update: update
                                    ,view: view
                                    ,row: row
                                    ,quandlUrl: quandlUrl
                                    ,decodeData: decodeData
                                    ,getData: getData
                                    ,sendData: sendData
                                    ,testMailBox: testMailBox};
};