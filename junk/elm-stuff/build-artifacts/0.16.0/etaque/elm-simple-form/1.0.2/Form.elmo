Elm.Form = Elm.Form || {};
Elm.Form.make = function (_elm) {
   "use strict";
   _elm.Form = _elm.Form || {};
   if (_elm.Form.values) return _elm.Form.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Form$Error = Elm.Form.Error.make(_elm),
   $Form$Field = Elm.Form.Field.make(_elm),
   $Form$Validate = Elm.Form.Validate.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var merge = F2(function (v1,v2) {
      var _p0 = {ctor: "_Tuple2",_0: v1,_1: v2};
      if (_p0.ctor === "_Tuple2" && _p0._0.ctor === "Group" && _p0._1.ctor === "Group") {
            return $Form$Field.Group(A2($Dict.union,_p0._0._0,_p0._1._0));
         } else {
            return v1;
         }
   });
   var getFocus = function (_p1) {    var _p2 = _p1;return _p2._0.focus;};
   var isDirtyAt = F2(function (qualifiedName,_p3) {    var _p4 = _p3;return A2($Set.member,qualifiedName,_p4._0.dirtyFields);});
   var isChangedAt = F2(function (qualifiedName,_p5) {    var _p6 = _p5;return A2($Set.member,qualifiedName,_p6._0.changedFields);});
   var getErrorAt = F2(function (qualifiedName,_p7) {
      var _p8 = _p7;
      var walkPath = F2(function (path,maybeNode) {
         walkPath: while (true) {
            var _p9 = path;
            if (_p9.ctor === "::") {
                  var _p10 = maybeNode;
                  if (_p10.ctor === "Just") {
                        var _p12 = _p10._0;
                        var _p11 = _p12;
                        if (_p11.ctor === "GroupErrors") {
                              var _v8 = _p9._1,_v9 = A2($Form$Error.getAt,_p9._0,_p12);
                              path = _v8;
                              maybeNode = _v9;
                              continue walkPath;
                           } else {
                              return $Maybe.Just(_p12);
                           }
                     } else {
                        return $Maybe.Nothing;
                     }
               } else {
                  return maybeNode;
               }
         }
      });
      return A2(walkPath,A2($String.split,".",qualifiedName),$Maybe.Just(_p8._0.errors));
   });
   var getErrors = function (_p13) {
      var _p14 = _p13;
      var mapGroupItem = F2(function (path,_p15) {    var _p16 = _p15;return A2(walkTree,A2($Basics._op["++"],path,_U.list([_p16._0])),_p16._1);});
      var walkTree = F2(function (path,node) {
         var _p17 = node;
         if (_p17.ctor === "GroupErrors") {
               return A2($List.concatMap,mapGroupItem(path),$Dict.toList(_p17._0));
            } else {
               return _U.list([{ctor: "_Tuple2",_0: A2($String.join,".",path),_1: node}]);
            }
      });
      return A2(walkTree,_U.list([]),_p14._0.errors);
   };
   var isSubmitted = function (_p18) {    var _p19 = _p18;return _p19._0.isSubmitted;};
   var getLiveErrorAt = F2(function (name,form) {
      return isSubmitted(form) || A2(isChangedAt,name,form) && $Basics.not(A2(isDirtyAt,name,form)) ? A2(getErrorAt,name,form) : $Maybe.Nothing;
   });
   var getOutput = function (_p20) {    var _p21 = _p20;return _p21._0.output;};
   var setFieldAt = F3(function (qualifiedName,field,_p22) {
      var _p23 = _p22;
      var walkPath = F2(function (path,maybeNode) {
         var _p24 = path;
         if (_p24.ctor === "::") {
               var _p25 = _p24._0;
               var node = A2($Maybe.withDefault,$Form$Field.Group($Dict.empty),maybeNode);
               var childField = A2(walkPath,_p24._1,A2($Form$Field.at,_p25,node));
               return A2(merge,$Form$Field.Group($Dict.fromList(_U.list([{ctor: "_Tuple2",_0: _p25,_1: childField}]))),node);
            } else {
               return field;
            }
      });
      return A2(walkPath,A2($String.split,".",qualifiedName),$Maybe.Just(_p23._0.fields));
   });
   var getFieldAt = F2(function (qualifiedName,_p26) {
      var _p27 = _p26;
      var walkPath = F2(function (name,maybeField) {
         var _p28 = maybeField;
         if (_p28.ctor === "Just") {
               return A2($Form$Field.at,name,_p28._0);
            } else {
               return $Maybe.Nothing;
            }
      });
      return A3($List.foldl,walkPath,$Maybe.Just(_p27._0.fields),A2($String.split,".",qualifiedName));
   });
   var getStringAt = F2(function (name,form) {    return A2($Maybe.andThen,A2(getFieldAt,name,form),$Form$Field.asString);});
   var getBoolAt = F2(function (name,form) {    return A2($Maybe.andThen,A2(getFieldAt,name,form),$Form$Field.asBool);});
   var updateValidate = function (model) {
      var _p29 = model.validation(model.fields);
      if (_p29.ctor === "Ok") {
            return _U.update(model,{errors: $Form$Error.GroupErrors($Dict.empty),dirtyFields: $Set.empty,output: $Maybe.Just(_p29._0)});
         } else {
            return _U.update(model,{errors: _p29._0,dirtyFields: $Set.empty,output: $Maybe.Nothing});
         }
   };
   var Reset = function (a) {    return {ctor: "Reset",_0: a};};
   var reset = Reset;
   var Submit = {ctor: "Submit"};
   var submit = Submit;
   var Validate = {ctor: "Validate"};
   var validate = Validate;
   var UpdateField = F2(function (a,b) {    return {ctor: "UpdateField",_0: a,_1: b};});
   var updateTextField = F2(function (name,s) {    return A2(UpdateField,name,$Form$Field.Text(s));});
   var updateSelectField = updateTextField;
   var updateRadioField = updateTextField;
   var updateCheckField = F2(function (name,b) {    return A2(UpdateField,name,$Form$Field.Check(b));});
   var OnBlur = function (a) {    return {ctor: "OnBlur",_0: a};};
   var onBlur = OnBlur;
   var OnFocus = function (a) {    return {ctor: "OnFocus",_0: a};};
   var onFocus = OnFocus;
   var NoOp = {ctor: "NoOp"};
   var getField = F3(function (getValue,path,form) {
      return {path: path
             ,value: A2(getValue,path,form)
             ,error: A2(getErrorAt,path,form)
             ,liveError: A2(getLiveErrorAt,path,form)
             ,isDirty: A2(isDirtyAt,path,form)
             ,isChanged: A2(isChangedAt,path,form)
             ,hasFocus: _U.eq(getFocus(form),$Maybe.Just(path))};
   });
   var getFieldAsBool = getField(getBoolAt);
   var getFieldAsString = getField(getStringAt);
   var FieldState = F7(function (a,b,c,d,e,f,g) {    return {path: a,value: b,error: c,liveError: d,isDirty: e,isChanged: f,hasFocus: g};});
   var Model = F8(function (a,b,c,d,e,f,g,h) {
      return {fields: a,focus: b,dirtyFields: c,changedFields: d,isSubmitted: e,output: f,errors: g,validation: h};
   });
   var F = function (a) {    return {ctor: "F",_0: a};};
   var initial = F2(function (initialFields,validation) {
      return F({fields: $Form$Field.group(initialFields)
               ,focus: $Maybe.Nothing
               ,dirtyFields: $Set.empty
               ,changedFields: $Set.empty
               ,isSubmitted: false
               ,output: $Maybe.Nothing
               ,errors: $Form$Error.GroupErrors($Dict.empty)
               ,validation: validation});
   });
   var update = F2(function (action,_p30) {
      var _p31 = _p30;
      var _p34 = _p31._0;
      var _p32 = action;
      switch (_p32.ctor)
      {case "NoOp": return F(_p34);
         case "OnFocus": var newModel = _U.update(_p34,{focus: $Maybe.Just(_p32._0)});
           return F(newModel);
         case "OnBlur": var newModel = _U.update(_p34,{focus: $Maybe.Nothing});
           return F(updateValidate(newModel));
         case "UpdateField": var _p33 = _p32._0;
           var newChangedFields = A2($Set.insert,_p33,_p34.changedFields);
           var newDirtyFields = A2($Set.insert,_p33,_p34.dirtyFields);
           var newFields = A3(setFieldAt,_p33,_p32._1,F(_p34));
           var newModel = _U.update(_p34,{fields: newFields,dirtyFields: newDirtyFields,changedFields: newChangedFields});
           return F(newModel);
         case "Validate": return F(updateValidate(_p34));
         case "Submit": var validatedModel = updateValidate(_p34);
           return F(_U.update(validatedModel,{isSubmitted: true}));
         default: var newModel = _U.update(_p34,
           {fields: $Form$Field.group(_p32._0)
           ,dirtyFields: $Set.empty
           ,changedFields: $Set.empty
           ,isSubmitted: false
           ,errors: $Form$Error.GroupErrors($Dict.empty)});
           return F(newModel);}
   });
   return _elm.Form.values = {_op: _op
                             ,initial: initial
                             ,update: update
                             ,getFieldAsString: getFieldAsString
                             ,getFieldAsBool: getFieldAsBool
                             ,getFocus: getFocus
                             ,getErrors: getErrors
                             ,isSubmitted: isSubmitted
                             ,getOutput: getOutput
                             ,onFocus: onFocus
                             ,onBlur: onBlur
                             ,validate: validate
                             ,submit: submit
                             ,reset: reset
                             ,updateTextField: updateTextField
                             ,updateSelectField: updateSelectField
                             ,updateCheckField: updateCheckField
                             ,updateRadioField: updateRadioField
                             ,FieldState: FieldState};
};